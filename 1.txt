#include<iostream>
#include<map>
#include<string>

std::string derivative(std::string polynomial) {
    std::map<int, int> polinom;
    std::string res;
    int l, r, temp, log;
    l = 0;
    r = -1;
    temp = 0;
    log = 1;
    char c;
    for(int i = 0; i < polynomial.size(); i++)
    {
	    c = polynomial[i];
	    if(c == '*')
	    {
		    temp += stoi(polynomial.substr(l, (i-l)));
		    l = i+1;
	    }
	    else if(c == 'x')
	    {
		    r = i;
		    l = i;
	    }
	    else if(c == '^')
	    {
		    l = i + 1;
	    }
	    else if((c == '+' || c == '-') && (r>=0) && i)
	    {
		    temp = (temp)?(temp):(1);
		    temp*= log;
		    if(l == r)
		    {
			    polinom[0] += temp;
		    }
		    else
		    {
			    polinom[stoi(polynomial.substr(l, (i-l))) - 1] += temp;
		    }
		    l = i + 1;
		    temp = 0;
		    log = 1;
		    if(c == '-') log = -1;
		    r = -1;
	    }
	    else if((i == 0) && (c == '-'))
		    log = -1;
    }
    if(r >= 0)
    {
	temp = (temp)?(temp):(1);
	temp *= log;
	if(l == r)
	{
	    polinom[0] += temp;
	}
	else
	{
		polinom[stoi(polynomial.substr(l, (polynomial.size()-l)))-1] += temp;
	}
    }
    auto it = polinom.begin();
    while(it != polinom.end())
    {
	    if(it->second == 0)
		    it = polinom.erase(it);
	    else
		    it++;
    }
    for(std::map<int, int>::reverse_iterator i = polinom.rbegin(); i != polinom.rend(); i++)
    {
	    if(i->second > 0 && i != polinom.rbegin())
		    res += '+';
	    res += std::to_string(i->second * (i->first + 1));
	    if(i->first)
	    {
		    res += "*x";
		    if(i->first > 1)
		    {
			    res += '^';
			    res += std::to_string(i->first);
		    }
	    }
	    	
    }
    return (res);
}

int main(void)
{
	std::string s;
	std::cin >> s;
	std::cout << derivative(s);
}
